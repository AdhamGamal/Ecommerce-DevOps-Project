name: Build and Push to Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies & Build Backend
        run: |
          echo "üöÄ Setting up backend..."
          cd BackEnd
          npm install --only=production
          echo "‚úÖ Backend dependencies installed."

      - name: Build Backend Docker Image
        run: |
          echo "üê≥ Building backend Docker image..."
          docker build -t ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE }}:latest -f BackEnd/Dockerfile .
          echo "‚úÖ Backend Docker image built."

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Backend Image to Docker Hub
        run: |
          echo "üöÄ Pushing backend image to Docker Hub..."
          docker push ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE }}:latest
          echo "‚úÖ Backend image pushed."

  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies & Build Frontend
        run: |
          echo "üöÄ Setting up frontend..."
          cd FrontEnd
          npm install
          npm run build
          echo "‚úÖ Frontend build completed."

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Fetch EC2 Public IPs using AWS CLI
        id: fetch_ips
        run: |
          echo "üöÄ Fetching backend EC2 instance IPs using AWS CLI..."
          BACKEND_IPS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Elegance-Backend*" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
          
          echo "BACKEND_IPS=${BACKEND_IPS}" >> $GITHUB_ENV
          echo "‚úÖ EC2 instance IPs fetched."

      - name: Update Nginx Configuration
        run: |
          echo "üöÄ Updating Nginx configuration..."
          
          # Get backend IPs dynamically from the AWS CLI
          BACKENDS=$(echo $BACKEND_IPS | tr " " "\n")

          # Build the upstream block for nginx
          UPSTREAM=""
          for ip in $BACKENDS; do
            UPSTREAM+="server ${ip}:${{ vars.BACKEND_PORT || 8000 }};\n"
          done

          # Inject into nginx.conf.template
          sed "s|\${BACKEND_SERVERS}|${UPSTREAM}|" FrontEnd/default.conf.template > FrontEnd/default.conf

          echo "‚úÖ Nginx configuration updated."

      - name: Build Frontend Docker Image
        run: |
          echo "üê≥ Building frontend Docker image..."
          docker build -t ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.FRONTEND_IMAGE }}:latest -f FrontEnd/Dockerfile .
          echo "‚úÖ Frontend Docker image built."

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Frontend Image to Docker Hub
        run: |
          echo "üöÄ Pushing frontend image to Docker Hub..."
          docker push ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.FRONTEND_IMAGE }}:latest
          echo "‚úÖ Frontend image pushed."
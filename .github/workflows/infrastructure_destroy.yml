name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy" to confirm'
        required: true
        default: 'cancel'

jobs:
  destroy:
    if: inputs.confirm_destroy == 'destroy'
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Destroy Resources
      run: |
        # Set the common tag key-value pair used by Terraform
        TERRAFORM_TAG="Name"
        TERRAFORM_VALUE_PREFIX="Elegance-"

        echo "Starting destruction of resources..."

        # Terminate EC2 instances
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "Reservations[].Instances[].InstanceId" \
          --output text)

        if [ -n "$INSTANCE_IDS" ]; then
          echo "Terminating instances: $INSTANCE_IDS"
          aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
          
          echo "Waiting for instances to terminate..."
          aws ec2 wait instance-terminated --instance-ids $INSTANCE_IDS
        else
          echo "No instances found to terminate"
        fi

    - name: Destroy VPC Components
      run: |
        # Get VPC ID
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" --query "Vpcs[0].VpcId" --output text)

        if [ -z "$VPC_ID" ] || [ "$VPC_ID" == "None" ]; then
          echo "No VPC found to delete"
          exit 0
        fi

        echo "Processing VPC: $VPC_ID"

        # Delete Internet Gateway if exists
        IGW_ID=$(aws ec2 describe-internet-gateways \
          --filters "Name=attachment.vpc-id,Values=$VPC_ID" "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "InternetGateways[0].InternetGatewayId" \
          --output text)

        if [ -n "$IGW_ID" ] && [ "$IGW_ID" != "None" ]; then
          echo "Detaching and deleting IGW: $IGW_ID"
          aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID || true
          aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID || true
        else
          echo "No IGW found to delete"
        fi

        # Delete Subnets
        SUBNET_IDS=$(aws ec2 describe-subnets \
          --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "Subnets[].SubnetId" \
          --output text)

        if [ -n "$SUBNET_IDS" ]; then
          echo "Deleting subnets: $SUBNET_IDS"
          for SUBNET_ID in $SUBNET_IDS; do
            aws ec2 delete-subnet --subnet-id $SUBNET_ID || true
          done
        else
          echo "No subnets found to delete"
        fi

        # Delete Route Tables
        RT_IDS=$(aws ec2 describe-route-tables \
          --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "RouteTables[?Associations[?Main!=`true`]].RouteTableId" \
          --output text)

        if [ -n "$RT_IDS" ]; then
          echo "Deleting route tables: $RT_IDS"
          for RT_ID in $RT_IDS; do
            # First disassociate any route table associations
            ASSOC_IDS=$(aws ec2 describe-route-tables \
              --route-table-ids $RT_ID \
              --query "RouteTables[].Associations[].RouteTableAssociationId" \
              --output text)
              
            for ASSOC_ID in $ASSOC_IDS; do
              aws ec2 disassociate-route-table --association-id $ASSOC_ID || true
            done
            
            aws ec2 delete-route-table --route-table-id $RT_ID || true
          done
        else
          echo "No route tables found to delete"
        fi

        # Delete Security Groups (except default)
        SG_IDS=$(aws ec2 describe-security-groups \
          --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "SecurityGroups[?GroupName!='default'].GroupId" \
          --output text)

        if [ -n "$SG_IDS" ]; then
          echo "Deleting security groups: $SG_IDS"
          for SG_ID in $SG_IDS; do
            aws ec2 delete-security-group --group-id $SG_ID || true
          done
        else
          echo "No security groups found to delete"
        fi

        # Finally delete VPC
        echo "Deleting VPC: $VPC_ID"
        aws ec2 delete-vpc --vpc-id $VPC_ID || true
        echo "VPC deletion initiated"

        echo "Destruction of resources completed"
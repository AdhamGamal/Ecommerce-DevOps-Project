name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy" to confirm'
        required: true
        default: ''

jobs:
  destroy:
    if: inputs.confirm_destroy == 'destroy'
    runs-on: ubuntu-latest

    env:
      TERRAFORM_TAG: "Name"
      TERRAFORM_VALUE_PREFIX: "Elegance-"

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Destroy EC2 Instances
      run: |
        echo "üîç Fetching EC2 instances..."
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "Reservations[].Instances[].InstanceId" \
          --output text)

        if [ -n "$INSTANCE_IDS" ]; then
          echo "üí• Terminating instances: $INSTANCE_IDS"
          aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
          echo "‚è≥ Waiting for termination..."
          aws ec2 wait instance-terminated --instance-ids $INSTANCE_IDS
          echo "‚úÖ Instances terminated."
        else
          echo "‚ÑπÔ∏è No instances found."
        fi

    - name: Destroy VPC Components
      run: |
        echo "üîß Fetching VPC ID..."
        VPC_ID=$(aws ec2 describe-vpcs \
          --filters "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "Vpcs[0].VpcId" \
          --output text)

        if [ -z "$VPC_ID" ] || [ "$VPC_ID" == "None" ]; then
          echo "‚ÑπÔ∏è No VPC found. Exiting."
          exit 0
        fi

        echo "Processing VPC: $VPC_ID"

        # Delete Internet Gateway
        IGW_ID=$(aws ec2 describe-internet-gateways \
          --filters "Name=attachment.vpc-id,Values=$VPC_ID" "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "InternetGateways[0].InternetGatewayId" \
          --output text)
        
        if [ "$IGW_ID" != "None" ] && [ -n "$IGW_ID" ]; then
          echo "‚ùé Deleting IGW: $IGW_ID"
          aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID || true
          aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID || true
        else
          echo "‚ÑπÔ∏è No IGW found."
        fi

        # Delete Subnets
        SUBNET_IDS=$(aws ec2 describe-subnets \
          --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "Subnets[].SubnetId" \
          --output text)

        if [ -n "$SUBNET_IDS" ]; then
          echo "‚ùé Deleting subnets: $SUBNET_IDS"
          for SUBNET_ID in $SUBNET_IDS; do
            aws ec2 delete-subnet --subnet-id $SUBNET_ID || true
          done
        else
          echo "‚ÑπÔ∏è No subnets found."
        fi

        # Delete Security Groups
        SG_IDS=$(aws ec2 describe-security-groups \
          --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "SecurityGroups[?GroupName!='default'].GroupId" \
          --output text)

        if [ -n "$SG_IDS" ]; then
          echo "‚ùé Deleting security groups: $SG_IDS"
          for SG_ID in $SG_IDS; do
            aws ec2 delete-security-group --group-id $SG_ID || true
          done
        else
          echo "‚ÑπÔ∏è No non-default security groups found."
        fi

        # Delete Route Tables
        RTB_IDS=$(aws ec2 describe-route-tables \
          --filters "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "RouteTables[].RouteTableId" \
          --output text)

        if [ -n "$RTB_IDS" ]; then
          echo "‚ùé Deleting route tables: $RTB_IDS"
          for RTB_ID in $RTB_IDS; do
            aws ec2 delete-route-table --route-table-id $RTB_ID || true
          done
        else
          echo "‚ÑπÔ∏è No route tables found."
        fi

        # Delete VPC
        echo "üöÆ Deleting VPC: $VPC_ID"
        aws ec2 delete-vpc --vpc-id $VPC_ID || true
        echo "‚úÖ VPC deletion initiated."

    - name: Confirm Cleanup Success
      run: |
        echo "Checking for remaining resources..."
        REMAINING_VPCS=$(aws ec2 describe-vpcs \
          --filters "Name=tag:${TERRAFORM_TAG},Values=${TERRAFORM_VALUE_PREFIX}*" \
          --query "Vpcs[].VpcId" \
          --output text)

        if [ -z "$REMAINING_VPCS" ]; then
          echo "‚úÖ All tagged VPCs deleted successfully."
        else
          echo "‚ö†Ô∏è VPCs still exist: $REMAINING_VPCS"
        fi